pipeline { 
    agent any

    environment {
        // Artifactory Docker repository details
        DOCKER_REGISTRY = "trial4w4crx.jfrog.io"  // Removed https://
        DOCKER_REPO = "vault-repo"
        IMAGE_NAME = "vault-server"
        IMAGE_TAG = "latest"
        
        // Vault URL for secrets (adjust based on your setup)
        VAULT_ADDR = "http://vault-service:8200"
        //Credentials IDs for Jenkins
        GITHUB_CREDENTIALS_ID = "github-credentials-id"
        JFROG_CREDENTIALS_ID = "jfrog-credentials-id"
        
        // Kubernetes config
        K8S_NAMESPACE = "default"
        K8S_DEPLOYMENT_NAME = "vault"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-credentials-id', url: 'https://github.com/yahyayousef13/hashicorp-vault-deployment.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "command -v docker || { echo 'Docker is not installed'; exit 127; }"
                    sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG} ./docker"
                }
            }
        }

        stage('Push Docker Image to Artifactory') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'jfrog-credentials-id') {
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh "kubectl config set-context minikube --namespace=${K8S_NAMESPACE}"
                    sh "kubectl apply -f k8s/" // Apply all Kubernetes manifests
                    sh "kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_DEPLOYMENT_NAME}=${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    try {
                        sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --namespace=${K8S_NAMESPACE}"
                    } catch (Exception e) {
                        echo "Deployment failed: ${e.message}"
                        sh "kubectl rollout undo deployment/${K8S_DEPLOYMENT_NAME} --namespace=${K8S_NAMESPACE}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
